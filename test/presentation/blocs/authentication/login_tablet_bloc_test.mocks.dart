// Mocks generated by Mockito 5.4.4 from annotations
// in mboilerplateflutter/test/presentation/blocs/authentication/login_tablet_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:dio/dio.dart' as _i4;
import 'package:mboilerplateflutter/data/models/authentication/login_tablet_request_model.dart'
    as _i9;
import 'package:mboilerplateflutter/data/models/response/failure.dart' as _i7;
import 'package:mboilerplateflutter/domain/entities/authentication/login_tablet.dart'
    as _i8;
import 'package:mboilerplateflutter/domain/repositories/authentication/authentication_repository.dart'
    as _i2;
import 'package:mboilerplateflutter/domain/usecases/authentication/post_login_tablet_use_case.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthenticationRepository_0 extends _i1.SmartFake
    implements _i2.AuthenticationRepository {
  _FakeAuthenticationRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDioException_2 extends _i1.SmartFake implements _i4.DioException {
  _FakeDioException_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostLoginTabletUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostLoginTabletUseCase extends _i1.Mock
    implements _i5.PostLoginTabletUseCase {
  MockPostLoginTabletUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthenticationRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.LoginTablet>> execute(
    _i9.LoginTabletRequestModel? request, {
    _i4.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [request],
          {#cancelToken: cancelToken},
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.LoginTablet>>.value(
            _FakeEither_1<_i7.Failure, _i8.LoginTablet>(
          this,
          Invocation.method(
            #execute,
            [request],
            {#cancelToken: cancelToken},
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.LoginTablet>>);
}

/// A class which mocks [CancelToken].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelToken extends _i1.Mock implements _i4.CancelToken {
  MockCancelToken() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set requestOptions(_i4.RequestOptions? _requestOptions) => super.noSuchMethod(
        Invocation.setter(
          #requestOptions,
          _requestOptions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isCancelled => (super.noSuchMethod(
        Invocation.getter(#isCancelled),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<_i4.DioException> get whenCancel => (super.noSuchMethod(
        Invocation.getter(#whenCancel),
        returnValue: _i6.Future<_i4.DioException>.value(_FakeDioException_2(
          this,
          Invocation.getter(#whenCancel),
        )),
      ) as _i6.Future<_i4.DioException>);

  @override
  void cancel([Object? reason]) => super.noSuchMethod(
        Invocation.method(
          #cancel,
          [reason],
        ),
        returnValueForMissingStub: null,
      );
}
